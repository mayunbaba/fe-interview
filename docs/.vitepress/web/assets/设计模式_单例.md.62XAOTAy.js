import{_ as r,j as s,i as l,a1 as n}from"./chunks/framework.DyWNUh6Q.js";import"./chunks/theme.0vZazFZp.js";class e{constructor(){return e.instance||(e.instance=this,this.logs=[]),e.instance}log(t){this.logs.push(t),console.log("[Lazy Logger]",t)}getLogs(){return this.logs}}const o=new e,a=new e;o.log("First log message from Lazy Logger");a.log("Second log message from Lazy Logger");console.log(o===a);console.log("All logs:",o.getLogs());const L=JSON.parse('{"title":"单例模式（创建模式）","description":"","frontmatter":{},"headers":[],"relativePath":"设计模式/单例.md","filePath":"设计模式/单例.md"}'),i={name:"设计模式/单例.md"},c=n('<h1 id="单例模式-创建模式" tabindex="-1">单例模式（创建模式） <a class="header-anchor" href="#单例模式-创建模式" aria-label="Permalink to &quot;单例模式（创建模式）&quot;">​</a></h1><p>单例模式（Singleton Pattern）是一种创建型设计模式，用于确保类只有一个实例，并提供一个全局访问点。它的核心思想是通过控制类的实例化过程，确保在应用程序的生命周期内只有一个实例存在。</p><h2 id="单例模式的要素" tabindex="-1">单例模式的要素 <a class="header-anchor" href="#单例模式的要素" aria-label="Permalink to &quot;单例模式的要素&quot;">​</a></h2><ul><li>私有化构造函数（Private Constructor）： 防止外部直接实例化类的对象。</li><li>静态方法或属性（Static Method or Property）： 通过静态方法或属性来提供对唯一实例的全局访问。</li></ul><h2 id="使用场景" tabindex="-1">使用场景 <a class="header-anchor" href="#使用场景" aria-label="Permalink to &quot;使用场景&quot;">​</a></h2><ul><li>日志记录器</li><li>对话框、提示框等全局组件</li></ul>',6),h=[c];function _(g,t,d,u,m,p){return l(),s("div",null,h)}const S=r(i,[["render",_]]);export{L as __pageData,S as default};
