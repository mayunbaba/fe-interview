import{_ as l,j as e,i,a1 as t}from"./chunks/framework.DyWNUh6Q.js";import"./chunks/theme.0vZazFZp.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"http/index.md","filePath":"http/index.md"}'),a={name:"http/index.md"},o=t('<h2 id="状态码" tabindex="-1">状态码 <a class="header-anchor" href="#状态码" aria-label="Permalink to &quot;状态码&quot;">​</a></h2><ul><li>200 OK：请求已成功。</li><li>3xx 重定向</li><li>4xx 客户端错误</li><li>5xx 服务端错误</li></ul><h2 id="method-restfulapi" tabindex="-1">method（RESTfulApi） <a class="header-anchor" href="#method-restfulapi" aria-label="Permalink to &quot;method（RESTfulApi）&quot;">​</a></h2><p>GET(查) POST(增) PUT（改） DELETE（删）</p><h2 id="缓存策略" tabindex="-1">缓存策略 <a class="header-anchor" href="#缓存策略" aria-label="Permalink to &quot;缓存策略&quot;">​</a></h2><ul><li><p>强缓存</p><ul><li>Expires头字段：服务器返回资源时，通过设置 Expires 头字段指定资源的过期时间，可能与客户端时间不一致。</li><li>Cache-Control 头字段： 通过设置 Cache-Control 头字段的 max-age 指令，告诉客户端资源在多长时间内有效，单位是秒。与 Expires 不同，Cache-Control 是相对时间，不受客户端时间影响。</li></ul></li><li><p>协商缓存（很常用）</p><ul><li>Last-Modified 和 If-Modified-Since 头字段： 服务器返回资源时，通过设置 Last-Modified 头字段指定资源的最后修改时间，客户端可以通过发送 If-Modified-Since 头字段检查资源是否有更新。</li></ul></li></ul><h2 id="cookie-和-session-区别-偏后端" tabindex="-1">Cookie 和 Session 区别 （偏后端） <a class="header-anchor" href="#cookie-和-session-区别-偏后端" aria-label="Permalink to &quot;Cookie 和 Session 区别 （偏后端）&quot;">​</a></h2><ul><li>存储位置： <ul><li>Cookie 存储在客户端，以文本形式保存在客户端的浏览器中，每次请求都会将 Cookie 信息发送给服务器。</li><li>Session 存储在服务器端，通常存储在服务器的内存或数据库中，客户端只保存了 SessionID，用来标识服务器端存储的 Session 数据。</li></ul></li></ul><h2 id="http和https的区别" tabindex="-1">http和https的区别 <a class="header-anchor" href="#http和https的区别" aria-label="Permalink to &quot;http和https的区别&quot;">​</a></h2><ul><li>数据传输方式： <ul><li>明文</li><li>SSL/TLS加密处理，保证数据传输的安全性</li></ul></li><li>默认端口 <ul><li>HTTP: 80</li><li>HTTPS: 443</li></ul></li><li>认证： <ul><li>HTTPS通常使用证书来验证服务器的身份，以确保链接的安全性和可信度。</li><li>HTTP不提供身份验证，因此容易受到中间人攻击。</li></ul></li></ul><h2 id="http-1-1和http-2-区别" tabindex="-1">http/1.1和http/2 区别 <a class="header-anchor" href="#http-1-1和http-2-区别" aria-label="Permalink to &quot;http/1.1和http/2 区别&quot;">​</a></h2><ul><li>多路复用</li><li>头部压缩</li><li>服务器推送</li></ul><h2 id="tcp-三次握手" tabindex="-1">TCP 三次握手 <a class="header-anchor" href="#tcp-三次握手" aria-label="Permalink to &quot;TCP 三次握手&quot;">​</a></h2><ul><li>客户端发起连接请求</li><li>服务器响应连接请求</li><li>客户端确认连接</li></ul><h2 id="preload和prefetch区别" tabindex="-1">preload和prefetch区别 <a class="header-anchor" href="#preload和prefetch区别" aria-label="Permalink to &quot;preload和prefetch区别&quot;">​</a></h2><ul><li>preload 提高资源加载优先级。一般用于加载首屏CSS、JavaScript。</li><li>prefetch 降低资源加载优先级。一般用于其他页面的资源。 <a href="http://127.0.0.1:5500/example/pre/1.html" target="_blank" rel="noreferrer">demo</a></li></ul>',16),r=[o];function h(s,n,p,d,u,c){return i(),e("div",null,r)}const x=l(a,[["render",h]]);export{m as __pageData,x as default};
